{"version":3,"sources":["file:///C:/Projects/Cocos/ClbBlast/assets/entities/field/FieldController.ts"],"names":["_decorator","Component","UITransform","Vec3","randomRangeInt","EventTarget","TileController","StdTileController","FieldModel","TileCreator","ccclass","property","FieldController","type","visible","tooltip","tileClickedEvent","_field","_timeToexecute","_canexecute","logicField","start","tileCreator","setModel","fieldModel","generateTiles","analizeTiles","console","log","rows","cols","map","getFieldMap","yIndex","xIndex","tileModel","getTileModelByMapMnemonic","tile","createTile","row","col","putOnField","position","create","tileName","tileController","getComponent","justCreated","clickedEvent","on","tileClicked","tPos","calculateTilePosition","parent","node","size","calculateTileSize","scale","border","tW","tilesArea","width","tileTransform","coef","z","emit","getConnectedTiles","connectedTiles","Set","findConnectedTiles","Array","from","values","resultSet","addTile","current","other","tileTypeId","has","add","moveAllTilesOnARote","roteId","startTile","getStartTile","endTile","getEndTile","emptyModel","getTileModel","findTiles","destroied","res","forEach","isDestroied","tileId","push","fwd","destroiedTiles","length","stdTileModels","getStandartTiles","pathTiles","index","tileRowId","yPosIndex","liveTiles","t","i","moveTile","PrepareTilesForAnalize","set","AnalizeConnects","stdTile","resetSpecialSprite","tileAnalized","quantityToStar","setStar","quantityToBomb","setBomb","quantityToRocket","setRocket","move","startModel","getTile","tileType","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACEA,MAAAA,U,OAAAA,U;AACAC,MAAAA,S,OAAAA,S;AAEAC,MAAAA,W,OAAAA,W;AACAC,MAAAA,I,OAAAA,I;AACAC,MAAAA,c,OAAAA,c;AACAC,MAAAA,W,OAAAA,W;;AAEOC,MAAAA,c,iBAAAA,c;;AAEAC,MAAAA,iB,iBAAAA,iB;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,W,iBAAAA,W;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBX,U;;iCAGjBY,e,WADZF,OAAO,CAAC,iBAAD,C,UAMLC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE;AAAA;AAAA,qCAAR;AAAsBC,QAAAA,OAAO,EAAE,IAA/B;AAAqCC,QAAAA,OAAO,EAAE;AAA9C,OAAD,C,UAGRJ,QAAQ,CAACT,WAAD,C,UAGRS,QAAQ;AAAA;AAAA,qC,2BAZX,MACaC,eADb,SACqCX,SADrC,CAC+C;AAAA;AAAA;AAAA,eAEtCe,gBAFsC,GAEN,IAAIX,WAAJ,EAFM;;AAAA;;AAAA;;AAAA;;AAAA,eAiBrCY,MAjBqC;AAAA,eAuU7CC,cAvU6C,GAuU5B,CAvU4B;AAAA,eAwU7CC,WAxU6C,GAwU/B,KAxU+B;AAAA;;AAmB/B,YAAVC,UAAU,GAAuB;AACnC,iBAAO,KAAKH,MAAZ;AACD;;AAEDI,QAAAA,KAAK,GAAG;AACN,eAAKC,WAAL,CAAiBC,QAAjB,CAA0B,KAAKC,UAA/B;AACA,eAAKC,aAAL;AACA,eAAKC,YAAL;AACD;AAED;AACF;AACA;;;AACUD,QAAAA,aAAa,GAAG;AAEtBE,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB,KAAKJ,UAAL,CAAgBK,IAAnC,GAA0C,SAA1C,GAAsD,KAAKL,UAAL,CAAgBM,IAAlF;AAEA,eAAKb,MAAL,GAAc,EAAd;AAEA,gBAAMc,GAAG,GAAG,KAAKP,UAAL,CAAgBQ,WAAhB,EAAZ;;AAEA,eAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG,KAAKT,UAAL,CAAgBK,IAA9C,EAAoDI,MAAM,EAA1D,EAA8D;AAE5D,iBAAKhB,MAAL,CAAYgB,MAAZ,IAAsB,EAAtB;;AAEA,iBAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG,KAAKV,UAAL,CAAgBK,IAA9C,EAAoDK,MAAM,EAA1D,EAA8D;AAE5D,kBAAIC,SAAS,GAAG,KAAKX,UAAL,CAAgBY,yBAAhB,CAA0CL,GAAG,CAACE,MAAD,CAAH,CAAYC,MAAZ,CAA1C,CAAhB;AACA,kBAAIG,IAAI,GAAG,KAAKC,UAAL,CAAgB;AAAEC,gBAAAA,GAAG,EAAEN,MAAP;AAAeO,gBAAAA,GAAG,EAAEN,MAApB;AAA4BC,gBAAAA,SAA5B;AAAuCM,gBAAAA,UAAU,EAAE;AAAnD,eAAhB,CAAX;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSH,QAAAA,UAAU,CAAC;AAAEC,UAAAA,GAAF;AAChBC,UAAAA,GADgB;AAEhBL,UAAAA,SAFgB;AAGhBO,UAAAA,QAAQ,GAAG,IAHK;AAIhBD,UAAAA,UAAU,GAAG;AAJG,SAAD,EAIuC;AAEtD,gBAAMJ,IAAI,GAAG,KAAKf,WAAL,CAAiBqB,MAAjB,CAAwBR,SAAS,CAACS,QAAlC,CAAb;AAEA,gBAAMC,cAAc,GAAGR,IAAI,CAACS,YAAL;AAAA;AAAA,+CAAvB;AACAD,UAAAA,cAAc,CAACE,WAAf,GAA6B,IAA7B;AACAF,UAAAA,cAAc,CAACtB,QAAf,CAAwBY,SAAxB;AAEAU,UAAAA,cAAc,CAACN,GAAf,GAAqBA,GAArB;AACAM,UAAAA,cAAc,CAACL,GAAf,GAAqBA,GAArB;AAEAK,UAAAA,cAAc,CAACG,YAAf,CAA4BC,EAA5B,CAA+B,gBAA/B,EAAiD,KAAKC,WAAtD,EAAmE,IAAnE;AAEA,cAAIC,IAAI,GAAG,KAAKC,qBAAL,CAA2Bb,GAA3B,EAAgCC,GAAhC,CAAX;AAEAH,UAAAA,IAAI,CAACK,QAAL,GAAgBA,QAAQ,IAAI,IAAZ,GAAmBS,IAAnB,GAA0BT,QAA1C;AACAL,UAAAA,IAAI,CAACgB,MAAL,GAAc,KAAKC,IAAnB;AAEA,gBAAMC,IAAI,GAAG,KAAKC,iBAAL,CAAuBnB,IAAvB,CAAb;AAEAA,UAAAA,IAAI,CAACoB,KAAL,GAAaF,IAAb;;AAEA,cAAId,UAAJ,EAAgB;AACd,iBAAKxB,MAAL,CAAYsB,GAAZ,EAAiBC,GAAjB,IAAwBK,cAAxB;AACD;;AAED,iBAAOA,cAAP;AACD;;AAEOO,QAAAA,qBAAqB,CAACb,GAAD,EAAcC,GAAd,EAAiC;AAC5D,gBAAMkB,MAAM,GAAG,KAAKlC,UAAL,CAAgBkC,MAAhB,GAAyB,CAAxC;AACA,cAAIC,EAAE,GAAG,KAAKC,SAAL,CAAeC,KAAf,GAAuB,KAAKrC,UAAL,CAAgBM,IAAhD;AACA,iBAAO,IAAI3B,IAAJ,CAASqC,GAAG,GAAGmB,EAAN,GAAWD,MAApB,EAA4BnB,GAAG,GAAGoB,EAAN,GAAWD,MAAvC,CAAP;AACD;;AAEOF,QAAAA,iBAAiB,CAACnB,IAAD,EAAmB;AAC1C;AACA,cAAIyB,aAAa,GAAGzB,IAAI,CAACS,YAAL,CAAkB5C,WAAlB,CAApB;AACA,cAAIyD,EAAE,GAAG,KAAKC,SAAL,CAAeC,KAAf,GAAuB,KAAKrC,UAAL,CAAgBM,IAAhD;AACA,cAAIiC,IAAI,GAAGJ,EAAE,IAAIG,aAAa,CAACD,KAAd,GAAsB,KAAKrC,UAAL,CAAgBkC,MAA1C,CAAb;AAEA,iBAAO,IAAIvD,IAAJ,CAAS4D,IAAT,EAAeA,IAAf,EAAqB1B,IAAI,CAACoB,KAAL,CAAWO,CAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACUd,QAAAA,WAAW,CAACb,IAAD,EAA6B;AAC9C,cAAI,KAAKnB,cAAL,GAAsB,CAA1B,EAA6B;AAC7BS,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BS,IAAI,CAACF,SAAL,CAAeS,QAAtD;AAEA,eAAK5B,gBAAL,CAAsBiD,IAAtB,CAA2B,iBAA3B,EAA8C,IAA9C,EAAoD5B,IAApD;AAEA,eAAKnB,cAAL,GAAsB,EAAtB;AACA,eAAKC,WAAL,GAAmB,IAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACS+C,QAAAA,iBAAiB,CAAC7B,IAAD,EAAyC;AAE/D,cAAI8B,cAAmC,GAAG,IAAIC,GAAJ,EAA1C;AAEA,eAAKC,kBAAL,CAAwBhC,IAAxB,EAA8B8B,cAA9B;AAEA,iBAAOG,KAAK,CAACC,IAAN,CAAWJ,cAAc,CAACK,MAAf,EAAX,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACUH,QAAAA,kBAAkB,CAAChC,IAAD,EAAuBoC,SAAvB,EAAuD;AAE/E,cAAIC,OAAO,GAAG,CAACC,OAAD,EAA0BC,KAA1B,KAAoD;AAEhE,gBAAID,OAAO,CAACE,UAAR,IAAsBD,KAAK,CAACC,UAAhC,EAA4C;AAC1C,kBAAI,CAACJ,SAAS,CAACK,GAAV,CAAcF,KAAd,CAAL,EAA2B;AACzBH,gBAAAA,SAAS,CAACM,GAAV,CAAcH,KAAd;AACA,qBAAKP,kBAAL,CAAwBO,KAAxB,EAA+BH,SAA/B;AACD;AACF;AACF,WARD;;AAUA,cAAIpC,IAAI,CAACE,GAAL,GAAW,CAAX,GAAe,KAAKf,UAAL,CAAgBK,IAAnC,EAAyC;AACvC6C,YAAAA,OAAO,CAACrC,IAAD,EAAO,KAAKpB,MAAL,CAAYoB,IAAI,CAACE,GAAL,GAAW,CAAvB,EAA0BF,IAAI,CAACG,GAA/B,CAAP,CAAP;AACD;;AAED,cAAIH,IAAI,CAACE,GAAL,GAAW,CAAX,IAAgB,CAApB,EAAuB;AACrBmC,YAAAA,OAAO,CAACrC,IAAD,EAAO,KAAKpB,MAAL,CAAYoB,IAAI,CAACE,GAAL,GAAW,CAAvB,EAA0BF,IAAI,CAACG,GAA/B,CAAP,CAAP;AACD;;AAED,cAAIH,IAAI,CAACG,GAAL,GAAW,CAAX,GAAe,KAAKhB,UAAL,CAAgBM,IAAnC,EAAyC;AACvC4C,YAAAA,OAAO,CAACrC,IAAD,EAAO,KAAKpB,MAAL,CAAYoB,IAAI,CAACE,GAAjB,EAAsBF,IAAI,CAACG,GAAL,GAAW,CAAjC,CAAP,CAAP;AACD;;AAED,cAAIH,IAAI,CAACG,GAAL,GAAW,CAAX,IAAgB,CAApB,EAAuB;AACrBkC,YAAAA,OAAO,CAACrC,IAAD,EAAO,KAAKpB,MAAL,CAAYoB,IAAI,CAACE,GAAjB,EAAsBF,IAAI,CAACG,GAAL,GAAW,CAAjC,CAAP,CAAP;AACD;AACF;;AAEOwC,QAAAA,mBAAmB,CAACC,MAAD,EAAiB;AAC1C,gBAAMC,SAAS,GAAG,KAAKC,YAAL,CAAkBF,MAAlB,CAAlB;AACA,gBAAMG,OAAO,GAAG,KAAKC,UAAL,CAAgBJ,MAAhB,CAAhB;AACA,gBAAMK,UAAU,GAAG,KAAK9D,UAAL,CAAgB+D,YAAhB,CAA6B,OAA7B,CAAnB;;AAEA,cAAIL,SAAS,IAAI,IAAb,IAAqBE,OAAO,IAAI,IAApC,EAA0C;AAAE;AAAS;;AAErD,gBAAMI,SAAS,GAAIC,SAAD,IAA0C;AAE1D,gBAAIC,GAAqB,GAAG,EAA5B;;AAEA,iBAAKzE,MAAL,CAAY0E,OAAZ,CAAoBpD,GAAG,IAAI;AACzB,kBAAIA,GAAG,CAAC0C,MAAD,CAAH,CAAYW,WAAZ,IAA2BH,SAA3B,IACDlD,GAAG,CAAC0C,MAAD,CAAH,IAAeC,SAAf,IACC3C,GAAG,CAAC0C,MAAD,CAAH,IAAeG,OADhB,IAEC7C,GAAG,CAAC0C,MAAD,CAAH,CAAYJ,UAAZ,IAA0BS,UAAU,CAACO,MAHzC,EAGkD;AAChDH,gBAAAA,GAAG,CAACI,IAAJ,CAASvD,GAAG,CAAC0C,MAAD,CAAZ;AACD;AACF,aAPD;;AASA,mBAAOS,GAAP;AACD,WAdD;;AAgBA,gBAAMK,GAAG,GAAGX,OAAO,CAAC7C,GAAR,GAAc2C,SAAS,CAAC3C,GAApC;AACA,gBAAMyD,cAAc,GAAGR,SAAS,CAAC,IAAD,CAAhC;;AAEA,cAAIQ,cAAc,CAACC,MAAf,IAAyB,CAA7B,EAAgC;AAC9B;AACD;;AAED,gBAAMC,aAAa,GAAG,KAAK1E,UAAL,CAAgB2E,gBAAhB,EAAtB;AAEA,cAAIC,SAAS,GAAG,EAAhB,CAhC0C,CAkC1C;;AACA,eAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,cAAc,CAACC,MAA3C,EAAmDI,KAAK,EAAxD,EAA4D;AAC1D,gBAAIC,SAAS,GAAGP,GAAG,GAAGb,SAAS,CAAC3C,GAAV,GAAgB,CAAhB,GAAoB8D,KAAvB,GAA+BnB,SAAS,CAAC3C,GAAV,GAAgB,CAAhB,GAAoB8D,KAAtE;AACA,gBAAIE,SAAS,GAAGR,GAAG,GAAGb,SAAS,CAAC3C,GAAV,GAAgB,CAAhB,GAAoB8D,KAAvB,GAA+BnB,SAAS,CAAC3C,GAAV,GAAgB,CAAhB,GAAoB8D,KAAtE;AACA,gBAAIhE,IAAI,GAAG,KAAKC,UAAL,CAAgB;AACzBC,cAAAA,GAAG,EAAE+D,SADoB;AAEzB9D,cAAAA,GAAG,EAAEyC,MAFoB;AAGzB9C,cAAAA,SAAS,EAAE+D,aAAa,CAAC9F,cAAc,CAAC,CAAD,EAAI8F,aAAa,CAACD,MAAlB,CAAf,CAHC;AAIzBvD,cAAAA,QAAQ,EAAE,KAAKU,qBAAL,CAA2BmD,SAA3B,EAAsCrB,SAAS,CAAC1C,GAAhD;AAJe,aAAhB,CAAX;AAOA4D,YAAAA,SAAS,CAACL,GAAG,GAAGM,KAAH,GAAWL,cAAc,CAACC,MAAf,GAAwBI,KAAxB,GAAgC,CAA/C,CAAT,GAA6DhE,IAA7D;AACD;;AAED,cAAImE,SAAS,GAAGhB,SAAS,CAAC,KAAD,CAAzB;AACAgB,UAAAA,SAAS,CAACb,OAAV,CAAkB,CAACc,CAAD,EAAIC,CAAJ,KAAU;AAC1BN,YAAAA,SAAS,CAACJ,cAAc,CAACC,MAAf,IAAyBF,GAAG,GAAGW,CAAH,GAAQF,SAAS,CAACP,MAAV,GAAmBS,CAAnB,GAAuB,CAA3D,CAAD,CAAT,GAA4ED,CAA5E;AACD,WAFD;AAIAL,UAAAA,SAAS,CAACT,OAAV,CAAkB,CAACc,CAAD,EAAoBC,CAApB,KAA0B;AAC1C,gBAAIJ,SAAS,GAAGP,GAAG,GAAGb,SAAS,CAAC3C,GAAV,GAAgB,CAAhB,GAAoBmE,CAAvB,GAA2BxB,SAAS,CAAC3C,GAAV,GAAgB,CAAhB,GAAoBmE,CAAlE;AACAD,YAAAA,CAAC,CAAClE,GAAF,GAAQ+D,SAAR;AAEA,iBAAKrF,MAAL,CAAYwF,CAAC,CAAClE,GAAd,EAAmBkE,CAAC,CAACjE,GAArB,IAA4BiE,CAA5B;AAEA,iBAAKE,QAAL,CAAcF,CAAd,EAAiB,KAAKrD,qBAAL,CAA2BqD,CAAC,CAAClE,GAA7B,EAAkCkE,CAAC,CAACjE,GAApC,CAAjB;AACD,WAPD;AAQD;;AAEOd,QAAAA,YAAY,GAAG;AAErB,eAAKkF,sBAAL;;AAEA,eAAK3F,MAAL,CAAY0E,OAAZ,CAAoB,CAACpD,GAAD,EAAMmE,CAAN,KAAY;AAC9BnE,YAAAA,GAAG,CAACoD,OAAJ,CAAY,CAACtD,IAAD,EAAOqE,CAAP,KAAa;AACvB,kBAAIG,GAAG,GAAG,IAAIzC,GAAJ,EAAV;AACA,mBAAKC,kBAAL,CAAwBhC,IAAxB,EAA8BwE,GAA9B;;AAEA,kBAAIA,GAAG,CAACtD,IAAJ,GAAW,CAAf,EAAkB;AAChB,qBAAKuD,eAAL,CAAqBD,GAArB;AACD,eAFD,MAEO;AAEL,oBAAIxE,IAAI;AAAA;AAAA,2DAAR,EAAuC;AACrC,wBAAM0E,OAAO,GAAG1E,IAAhB;AAEA0E,kBAAAA,OAAO,CAACC,kBAAR;AACD;AACF;;AAED3E,cAAAA,IAAI,CAACU,WAAL,GAAmB,KAAnB;AACAV,cAAAA,IAAI,CAAC4E,YAAL,GAAoB,IAApB;AACD,aAjBD;AAkBD,WAnBD;AAoBD;;AAEOH,QAAAA,eAAe,CAACD,GAAD,EAA2B;AAEhDA,UAAAA,GAAG,CAAClB,OAAJ,CAAYtD,IAAI,IAAI;AAClB,gBAAIA,IAAI,CAAC4E,YAAT,EAAuB;AACrB;AACD;;AAED,gBAAI5E,IAAI;AAAA;AAAA,uDAAR,EAAuC;AAErC,oBAAM0E,OAAO,GAAG1E,IAAhB;;AAEA,kBAAIwE,GAAG,CAACtD,IAAJ,IAAY,KAAK/B,UAAL,CAAgB0F,cAAhC,EAAgD;AAC9CH,gBAAAA,OAAO,CAACI,OAAR;AACD,eAFD,MAEO,IAAIN,GAAG,CAACtD,IAAJ,IAAY,KAAK/B,UAAL,CAAgB4F,cAAhC,EAAgD;AACrDL,gBAAAA,OAAO,CAACM,OAAR;AACD,eAFM,MAEA,IAAIR,GAAG,CAACtD,IAAJ,IAAY,KAAK/B,UAAL,CAAgB8F,gBAAhC,EAAkD;AACvDP,gBAAAA,OAAO,CAACQ,SAAR;AACD,eAFM,MAEA;AACLR,gBAAAA,OAAO,CAACC,kBAAR;AACD;AACF;AACF,WAnBD;AAoBD;;AAEOJ,QAAAA,sBAAsB,GAAG;AAE/B,eAAK3F,MAAL,CAAY0E,OAAZ,CAAoB,CAACpD,GAAD,EAAMmE,CAAN,KAAY;AAC9BnE,YAAAA,GAAG,CAACoD,OAAJ,CAAY,CAACtD,IAAD,EAAOqE,CAAP,KAAa;AACvB,kBAAIrE,IAAI,CAACuD,WAAT,EAAsB;AACpB,oBAAI,KAAK3E,MAAL,CAAYoB,IAAI,CAACE,GAAjB,EAAsBF,IAAI,CAACG,GAA3B,KAAmCH,IAAvC,EAA6C;AAC3C,uBAAKpB,MAAL,CAAYoB,IAAI,CAACE,GAAjB,EAAsBF,IAAI,CAACG,GAA3B,KAAmC,IAAnC;AACD;AACF;;AACDH,cAAAA,IAAI,CAAC4E,YAAL,GAAoB,KAApB;AACD,aAPD;AAQD,WATD;AAUD;;AAEON,QAAAA,QAAQ,CAACtE,IAAD,EAAuBK,QAAvB,EAAuC;AACrDL,UAAAA,IAAI,CAACmF,IAAL,CAAUnF,IAAI,CAACiB,IAAL,CAAUZ,QAApB,EAA8BA,QAA9B;AACD;;AAEMyC,QAAAA,YAAY,CAACF,MAAD,EAAiC;AAClD,gBAAMwC,UAAU,GAAG,KAAKjG,UAAL,CAAgB+D,YAAhB,CAA6B,OAA7B,CAAnB;AACA,iBAAO,KAAKmC,OAAL,CAAazC,MAAb,EAAqBwC,UAArB,CAAP;AACD;;AAEMpC,QAAAA,UAAU,CAACJ,MAAD,EAAiC;AAChD,gBAAMwC,UAAU,GAAG,KAAKjG,UAAL,CAAgB+D,YAAhB,CAA6B,KAA7B,CAAnB;AACA,iBAAO,KAAKmC,OAAL,CAAazC,MAAb,EAAqBwC,UAArB,CAAP;AACD;;AAEMC,QAAAA,OAAO,CAACzC,MAAD,EAAiB0C,QAAjB,EAAsD;AAElE,cAAIjC,GAAG,GAAG,IAAV;;AAEA,eAAKzE,MAAL,CAAY0E,OAAZ,CAAoB,CAACpD,GAAD,EAAMmE,CAAN,KAAY;AAC9B,gBAAInE,GAAG,CAAC0C,MAAD,CAAH,CAAYJ,UAAZ,IAA0B8C,QAAQ,CAAC9B,MAAvC,EAA+C;AAC7CH,cAAAA,GAAG,GAAGnD,GAAG,CAAC0C,MAAD,CAAT;AACA;AACD;AACF,WALD;;AAOA,iBAAOS,GAAP;AACD;;AAIDkC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACxB,cAAI,KAAK3G,cAAL,GAAsB,CAAtB,IAA2B,KAAKC,WAApC,EAAiD;AAC/C,iBAAKA,WAAL,GAAmB,KAAnB;;AAGA,iBAAK,IAAIkF,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAK7E,UAAL,CAAgBM,IAA5C,EAAkDuE,KAAK,EAAvD,EAA2D;AACzD,mBAAKrB,mBAAL,CAAyBqB,KAAzB;AACD;;AAED,iBAAK3E,YAAL;AACD;;AACD,eAAKR,cAAL,IAAuB2G,SAAvB;AACD;;AArV4C,O","sourcesContent":["import {\n  _decorator,\n  Component,\n  Node,\n  UITransform,\n  Vec3,\n  randomRangeInt,\n  EventTarget\n} from 'cc';\nimport { TileController } from '../tiles/TileController';\nimport { TileModel } from '../../models/TileModel';\nimport { StdTileController } from '../tiles/UsualTile/StdTileController';\nimport { FieldModel } from '../../models/FieldModel';\nimport { TileCreator } from './TileCreator';\nconst { ccclass, property } = _decorator;\n\n@ccclass('FieldController')\nexport class FieldController extends Component {\n\n  public tileClickedEvent: EventTarget = new EventTarget();\n\n  /** Field model */\n  @property({ type: [FieldModel], visible: true, tooltip: 'Field model' })\n  fieldModel: FieldModel;\n\n  @property(UITransform)\n  tilesArea: UITransform;\n\n  @property(TileCreator)\n  tileCreator: TileCreator;\n\n  /**\n   * Logic field (e.g. tiles matrix)\n   */\n  private _field: TileController[][];\n\n  get logicField(): TileController[][] {\n    return this._field;\n  }\n\n  start() {\n    this.tileCreator.setModel(this.fieldModel);\n    this.generateTiles();\n    this.analizeTiles();\n  }\n\n  /**\n   * Generate tile field\n   */\n  private generateTiles() {\n\n    console.log(\"[field] Rows: \" + this.fieldModel.rows + \" Cols: \" + this.fieldModel.cols);\n\n    this._field = [];\n\n    const map = this.fieldModel.getFieldMap();\n\n    for (let yIndex = 0; yIndex < this.fieldModel.rows; yIndex++) {\n\n      this._field[yIndex] = [];\n\n      for (let xIndex = 0; xIndex < this.fieldModel.rows; xIndex++) {\n\n        let tileModel = this.fieldModel.getTileModelByMapMnemonic(map[yIndex][xIndex]);\n        let tile = this.createTile({ row: yIndex, col: xIndex, tileModel, putOnField: true });\n      }\n    }\n  }\n\n  /**\n   * Creates tile instance\n   * @param row row position on logic field\n   * @param col col position on logic field\n   * @param tileModel tile model\n   * @param position real position on scene\n   * @param putOnField determines the need of putting tile on logic field\n   * (game puts tile only to the scene)\n   * @returns \n   */\n  public createTile({ row,\n    col,\n    tileModel,\n    position = null,\n    putOnField = false }: CreateTileArgs): TileController {\n\n    const tile = this.tileCreator.create(tileModel.tileName);\n\n    const tileController = tile.getComponent(TileController);\n    tileController.justCreated = true;\n    tileController.setModel(tileModel);\n\n    tileController.row = row;\n    tileController.col = col;\n\n    tileController.clickedEvent.on('TileController', this.tileClicked, this)\n\n    var tPos = this.calculateTilePosition(row, col);\n\n    tile.position = position == null ? tPos : position;\n    tile.parent = this.node;\n\n    const size = this.calculateTileSize(tile);\n\n    tile.scale = size;\n\n    if (putOnField) {\n      this._field[row][col] = tileController;\n    }\n\n    return tileController;\n  }\n\n  private calculateTilePosition(row: number, col: number): Vec3 {\n    const border = this.fieldModel.border / 2;\n    let tW = this.tilesArea.width / this.fieldModel.cols;\n    return new Vec3(col * tW + border, row * tW + border);\n  }\n\n  private calculateTileSize(tile: Node): Vec3 {\n    //onst border = this.fieldModel.border / 2;\n    let tileTransform = tile.getComponent(UITransform);\n    let tW = this.tilesArea.width / this.fieldModel.cols;\n    let coef = tW / (tileTransform.width + this.fieldModel.border);\n\n    return new Vec3(coef, coef, tile.scale.z);\n  }\n\n  /**\n   * Method invokes when one of tiles is clicked\n   * @param tile tile controller of clicked tile\n   */\n  private tileClicked(tile: TileController): void {\n    if (this._timeToexecute > 0) return;\n    console.log(\"[tile] clicked. Name: \" + tile.tileModel.tileName)\n\n    this.tileClickedEvent.emit('FieldController', this, tile);\n\n    this._timeToexecute = .2;\n    this._canexecute = true;\n  }\n\n  /**\n   * Get tiles that connected to each other\n   * @param tile initial tile\n   * @returns all connected tiles with same type\n   */\n  public getConnectedTiles(tile: TileController): TileController[] {\n\n    let connectedTiles: Set<TileController> = new Set<TileController>();\n\n    this.findConnectedTiles(tile, connectedTiles);\n\n    return Array.from(connectedTiles.values());\n  }\n\n  /**\n   * Find all connecticted tiles of same type\n   * @param tile initial tile\n   * @param resultSet set of connected tiles\n   */\n  private findConnectedTiles(tile: TileController, resultSet: Set<TileController>) {\n\n    let addTile = (current: TileController, other: TileController) => {\n\n      if (current.tileTypeId == other.tileTypeId) {\n        if (!resultSet.has(other)) {\n          resultSet.add(other);\n          this.findConnectedTiles(other, resultSet)\n        }\n      }\n    }\n\n    if (tile.row + 1 < this.fieldModel.rows) {\n      addTile(tile, this._field[tile.row + 1][tile.col]);\n    }\n\n    if (tile.row - 1 >= 0) {\n      addTile(tile, this._field[tile.row - 1][tile.col]);\n    }\n\n    if (tile.col + 1 < this.fieldModel.cols) {\n      addTile(tile, this._field[tile.row][tile.col + 1]);\n    }\n\n    if (tile.col - 1 >= 0) {\n      addTile(tile, this._field[tile.row][tile.col - 1]);\n    }\n  }\n\n  private moveAllTilesOnARote(roteId: number) {\n    const startTile = this.getStartTile(roteId);\n    const endTile = this.getEndTile(roteId);\n    const emptyModel = this.fieldModel.getTileModel(\"empty\");\n\n    if (startTile == null || endTile == null) { return; }\n\n    const findTiles = (destroied: boolean): TileController[] => {\n\n      let res: TileController[] = [];\n\n      this._field.forEach(row => {\n        if (row[roteId].isDestroied == destroied &&\n          (row[roteId] != startTile &&\n            row[roteId] != endTile &&\n            row[roteId].tileTypeId != emptyModel.tileId)) {\n          res.push(row[roteId]);\n        }\n      });\n\n      return res;\n    }\n\n    const fwd = endTile.row > startTile.row;\n    const destroiedTiles = findTiles(true);\n\n    if (destroiedTiles.length == 0) {\n      return;\n    }\n\n    const stdTileModels = this.fieldModel.getStandartTiles();\n\n    let pathTiles = [];\n\n    // add new tiles\n    for (let index = 0; index < destroiedTiles.length; index++) {\n      let tileRowId = fwd ? startTile.row + 1 + index : startTile.row - 1 - index;\n      let yPosIndex = fwd ? startTile.row - 1 - index : startTile.row + 1 + index;\n      var tile = this.createTile({\n        row: tileRowId,\n        col: roteId,\n        tileModel: stdTileModels[randomRangeInt(0, stdTileModels.length)],\n        position: this.calculateTilePosition(yPosIndex, startTile.col)\n      });\n\n      pathTiles[fwd ? index : destroiedTiles.length - index - 1] = tile;\n    }\n\n    var liveTiles = findTiles(false);\n    liveTiles.forEach((t, i) => {\n      pathTiles[destroiedTiles.length + (fwd ? i : (liveTiles.length - i - 1))] = t;\n    });\n\n    pathTiles.forEach((t: TileController, i) => {\n      let tileRowId = fwd ? startTile.row + 1 + i : startTile.row - 1 - i;\n      t.row = tileRowId;\n\n      this._field[t.row][t.col] = t;\n\n      this.moveTile(t, this.calculateTilePosition(t.row, t.col));\n    });\n  }\n\n  private analizeTiles() {\n\n    this.PrepareTilesForAnalize();\n\n    this._field.forEach((row, i) => {\n      row.forEach((tile, i) => {\n        let set = new Set<TileController>();\n        this.findConnectedTiles(tile, set);\n\n        if (set.size > 1) {\n          this.AnalizeConnects(set);\n        } else {\n\n          if (tile instanceof StdTileController) {\n            const stdTile = tile as StdTileController;\n\n            stdTile.resetSpecialSprite();\n          }\n        }\n\n        tile.justCreated = false;\n        tile.tileAnalized = true;\n      });\n    });\n  }\n\n  private AnalizeConnects(set: Set<TileController>) {\n\n    set.forEach(tile => {\n      if (tile.tileAnalized) {\n        return;\n      }\n\n      if (tile instanceof StdTileController) {\n\n        const stdTile = tile as StdTileController;\n\n        if (set.size >= this.fieldModel.quantityToStar) {\n          stdTile.setStar();\n        } else if (set.size >= this.fieldModel.quantityToBomb) {\n          stdTile.setBomb();\n        } else if (set.size >= this.fieldModel.quantityToRocket) {\n          stdTile.setRocket();\n        } else {\n          stdTile.resetSpecialSprite();\n        }\n      }\n    });\n  }\n\n  private PrepareTilesForAnalize() {\n\n    this._field.forEach((row, i) => {\n      row.forEach((tile, i) => {\n        if (tile.isDestroied) {\n          if (this._field[tile.row][tile.col] == tile) {\n            this._field[tile.row][tile.col] == null;\n          }\n        }\n        tile.tileAnalized = false;\n      });\n    });\n  }\n\n  private moveTile(tile: TileController, position: Vec3) {\n    tile.move(tile.node.position, position);\n  }\n\n  public getStartTile(roteId: number): TileController {\n    const startModel = this.fieldModel.getTileModel('start');\n    return this.getTile(roteId, startModel);\n  }\n\n  public getEndTile(roteId: number): TileController {\n    const startModel = this.fieldModel.getTileModel('end');\n    return this.getTile(roteId, startModel);\n  }\n\n  public getTile(roteId: number, tileType: TileModel): TileController {\n\n    let res = null;\n\n    this._field.forEach((row, i) => {\n      if (row[roteId].tileTypeId == tileType.tileId) {\n        res = row[roteId];\n        return;\n      }\n    });\n\n    return res;\n  }\n\n  _timeToexecute = 0;\n  _canexecute = false;\n  update(deltaTime: number) {\n    if (this._timeToexecute < 0 && this._canexecute) {\n      this._canexecute = false;\n\n\n      for (let index = 0; index < this.fieldModel.cols; index++) {\n        this.moveAllTilesOnARote(index);\n      }\n\n      this.analizeTiles();\n    }\n    this._timeToexecute -= deltaTime;\n  }\n}\n\ninterface CreateTileArgs {\n  row: number,\n  col: number,\n  tileModel: TileModel,\n  position?: Vec3 | null,\n  putOnField?: boolean\n}\n\n\n\n"]}