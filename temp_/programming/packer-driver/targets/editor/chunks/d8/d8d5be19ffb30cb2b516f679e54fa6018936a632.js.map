{"version":3,"sources":["file:///C:/Projects/Cocos/ClbBlast/assets/entities/tiles/TileController.ts"],"names":["_decorator","Component","log","EventTarget","Button","Vec3","CCFloat","TileModel","ccclass","property","TileController","_field","_button","_needMove","_from","_to","_speed","_interactable","clickedEvent","tileAnalized","_isDestroied","_activating","_justCreated","_col","_row","isDestroied","activating","tileTypeId","tileModel","tileId","justCreated","value","col","row","start","getComponent","setModel","tileName","interactable","setField","field","clicked","activate","destroyTile","OnClicked","emit","update","deltaTime","dir","subtract","normalize","Acceleration","Speed","speed3D","pos","dir2","multiplyScalar","add","node","position","equals","move","from","to"],"mappings":"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","sourcesContent":["import {\n    _decorator,\n    Component,\n    Sprite,\n    SpriteFrame,\n    log,\n    EventTarget,\n    Button,\n    Vec3,\n    CCFloat\n} from 'cc';\nimport { TileModel } from '../../models/TileModel';\nimport { FieldController } from '../field/FieldController';\nconst { ccclass, property } = _decorator;\n\n@ccclass('TileController')\nexport class TileController extends Component {\n\n    private _field: FieldController;\n    private _button: Button;\n    private _needMove: boolean = false;\n    private _from: Vec3;\n    private _to: Vec3;\n    private _speed: number;\n    private _interactable: boolean = true;\n    public clickedEvent: EventTarget = new EventTarget();\n\n    /**Tile model */\n    @property(TileModel)\n    tileModel: TileModel;\n\n    /** Speed */\n    @property(CCFloat)\n    Speed: number = 1;\n\n    /** Speed */\n    @property(CCFloat)\n    Acceleration: number = 0.1;\n\n    public tileAnalized: boolean;\n\n    private _isDestroied = false;\n    get isDestroied(): boolean {\n        return this._isDestroied;\n    }\n\n    private _activating = false;\n    get activating(): boolean {\n        return this._activating;\n    }\n\n    get tileTypeId(): number {\n        return this.tileModel.tileId;\n    }\n\n    private _justCreated: boolean = false;\n    get justCreated(): boolean {\n        return this._justCreated;\n    }\n    set justCreated(value: boolean) {\n        this._justCreated = value;\n    }\n\n    private _col: number = 0;\n    get col(): number {\n        return this._col;\n    }\n    set col(value: number) {\n        this._col = value;\n    }\n\n    private _row: number = 0;\n    get row(): number {\n        return this._row;\n    }\n    set row(value: number) {\n        this._row = value;\n    }\n\n    start() {\n        this._button = this.getComponent(Button);\n    }\n\n    public setModel(tileModel: TileModel) {\n        if (tileModel == null) {\n            log(\"[tile] tile model can't be null\");\n            return;\n        }\n\n        this.tileModel = tileModel;\n\n        if (tileModel.tileName == \"start\" ||\n            tileModel.tileName == \"end\" ||\n            tileModel.tileName == \"empty\") {\n            this._button = this.getComponent(Button);\n            this._interactable = false;\n            this._button.interactable = this._interactable;\n\n        }\n    }\n\n    public setField(field: FieldController) {\n        this._field = field;\n    }\n\n    /**\n     * Method called when Tile pressed\n     * @returns void\n     */\n    public clicked() {\n        this.activate();\n    }\n\n    public destroyTile() {\n        this._isDestroied = true;\n    }\n\n    public activate() {\n        if (this.activating ||\n            this._justCreated ||\n            !this._interactable ||\n            this.isDestroied) {\n            return;\n        }\n\n        this._activating = true;\n        this.OnClicked();\n        this._activating = false;\n    }\n\n    private OnClicked() {\n        this.clickedEvent.emit(\"TileController\", this);\n    }\n\n    update(deltaTime: number) {\n        if (this._needMove) {\n            let dir: Vec3 = new Vec3();\n            Vec3.subtract(dir, this._to, this._from)\n            dir.normalize();\n\n            this._speed += this.Acceleration * deltaTime;\n\n            if (this._speed > this.Speed) {\n                this._speed = this.Speed\n            }\n\n            let speed3D: Vec3 = new Vec3();\n            let pos: Vec3 = new Vec3();\n            let dir2: Vec3 = new Vec3();\n\n            Vec3.multiplyScalar(speed3D, dir, this._speed * deltaTime);\n            Vec3.add(pos, this.node.position, speed3D);\n            Vec3.subtract(dir2, this._to, pos)\n            dir2.normalize();\n\n            if (!dir.equals(dir2)) {\n                this._needMove = false;\n                pos = this._to;\n            }\n\n            this.node.position = pos;\n        }\n    }\n\n    move(from: Vec3, to: Vec3) {\n        this._from = from;\n        this._to = to;\n        this._speed = 0;\n        if (!this._to.equals(this._from)) this._needMove = true;\n    }\n}\n\n"]}