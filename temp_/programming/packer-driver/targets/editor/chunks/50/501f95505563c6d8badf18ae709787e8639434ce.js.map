{"version":3,"sources":["file:///C:/Projects/Cocos/ClbBlast/assets/entities/field/TileCreator.ts"],"names":["_decorator","Component","instantiate","Node","TileContollerListItem","ccclass","property","TileCreator","_fieldModel","setModel","fieldModel","create","name","prefabs","tilePrefabs","filter","t","names","split","haveResult","forEach","n","trim","length","prefab"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAmBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;;AAE5CC,MAAAA,qB,iBAAAA,qB;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;AAE9B;AACA;AACA;;6BAEaO,W,WADZF,OAAO,CAAC,aAAD,C,UAILC,QAAQ;AAAA;AAAA,yD,2BAJX,MACaC,WADb,SACiCN,SADjC,CAC2C;AAAA;AAAA;AAAA,eACjCO,WADiC;;AAAA;AAAA;;AAMlCC,QAAAA,QAAQ,CAACC,UAAD,EAAyB;AACtC,eAAKF,WAAL,GAAmBE,UAAnB;AACD;;AAEMC,QAAAA,MAAM,CAACC,IAAD,EAAqB;AAC/B,cAAIC,OAAO,GAAG,KAAKC,WAAL,CAAiBC,MAAjB,CAAwBC,CAAC,IAAI;AACzC,gBAAIC,KAAK,GAAGD,CAAC,CAACJ,IAAF,CAAOM,KAAP,CAAa,GAAb,CAAZ;AACA,gBAAIC,UAAU,GAAG,KAAjB;AACAF,YAAAA,KAAK,CAACG,OAAN,CAAeC,CAAC,IAAI;AAClB,kBAAIA,CAAC,CAACC,IAAF,MAAYV,IAAhB,EAAsB;AACpBO,gBAAAA,UAAU,GAAG,IAAb;AACA;AACD;AACF,aALD;;AAOA,gBAAIA,UAAJ,EAAgB;AACd,qBAAO,IAAP;AACD;;AAED,mBAAO,KAAP;AACD,WAfa,CAAd;;AAiBA,cAAIN,OAAO,CAACU,MAAR,GAAiB,CAArB,EAAwB;AACtB,mBAAOrB,WAAW,CAACW,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAZ,CAAlB;AACD,WAFD,MAEO;AACL,mBAAO,IAAP;AACD;;AAEF,iBAAO,IAAIrB,IAAJ,EAAP;AACD;;AAnCwC,O;;;;;iBAIF,E","sourcesContent":["import { _decorator, Component, Prefab, instantiate, Node } from 'cc';\r\nimport { FieldModel } from '../../models/FieldModel';\r\nimport { TileContollerListItem } from './TileContollerListItem';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * This class is need to build tiles of different types (prefabs)\r\n */\r\n@ccclass('TileCreator')\r\nexport class TileCreator extends Component {\r\n  private _fieldModel: FieldModel;\r\n\r\n  @property(TileContollerListItem)\r\n  tilePrefabs: TileContollerListItem[] = [];\r\n\r\n  public setModel(fieldModel: FieldModel) {\r\n    this._fieldModel = fieldModel;\r\n  }\r\n\r\n  public create(name: string): Node {\r\n     let prefabs = this.tilePrefabs.filter(t => {\r\n       let names = t.name.split(';');\r\n       let haveResult = false;\r\n       names.forEach((n => {\r\n         if (n.trim() == name) {\r\n           haveResult = true;\r\n           return;\r\n         }\r\n       }));\r\n \r\n       if (haveResult) {\r\n         return true;\r\n       }\r\n \r\n       return false;\r\n     });\r\n \r\n     if (prefabs.length > 0) {\r\n       return instantiate(prefabs[0].prefab);\r\n     } else {\r\n       return null;\r\n     }\r\n\r\n    return new Node();\r\n  }\r\n}\r\n\r\n\r\n"]}