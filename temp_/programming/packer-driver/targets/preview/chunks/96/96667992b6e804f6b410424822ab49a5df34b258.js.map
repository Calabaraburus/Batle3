{"version":3,"sources":["file:///C:/Projects/Cocos/ClbBlast/assets/models/FieldModel.ts"],"names":["_decorator","Component","CCInteger","CCFloat","TextAsset","Button","TileModel","MnemonicMapping","ccclass","property","FieldModel","type","visible","tooltip","getStandartTiles","tiles","filter","item","specialTile","getTileModel","typeName","tileName","getTileModelByMapMnemonic","mnemonic","map","mnemMapping","length","res","getFieldMap","result","textLines","fieldMap","text","split","forEach","line","i","iinv","j","charAt"],"mappings":"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","sourcesContent":["import {\n    _decorator,\n    Component,\n    CCInteger,\n    CCFloat,\n    TextAsset,\n    Button\n} from 'cc';\nimport { TileModel } from './TileModel';\nimport { MnemonicMapping } from './MnemonicMapping';\nconst { ccclass, property } = _decorator;\n\n/**\n * Represents game field model\n */\n@ccclass('FieldModel')\nexport class FieldModel extends Component  {\n\n    /**\n     * Tiles cols count\n     */\n    @property({ type: CCInteger })\n    cols: number = 15;\n\n    /**\n     * Tiles rows count\n     */\n    @property({ type: CCInteger })\n    rows: number = 15;\n\n    /**\n    * Tile margin\n    */\n    @property({ type: CCFloat })\n    border: number = 0.1;\n\n    /**\n     * Quantity of tiles to create rocket\n     */\n    @property({ type: CCInteger })\n    quantityToRocket: number = 5;\n\n    /**\n    * Quantity of tiles to create bomb\n    */\n    @property({ type: CCInteger })\n    quantityToBomb: number = 8;\n\n    /**\n    * Quantity of tiles to create star\n    */\n    @property({ type: CCInteger })\n    quantityToStar: number = 11;\n\n    /**\n     * Tile model collection\n     */\n    @property({ type: [TileModel], visible: true, tooltip: \"Tile models\" })\n    tiles: TileModel[] = [];\n\n    /**\n     * Field map\n     */\n    @property({ type: [TextAsset], visible: true, tooltip: \"Field map\" })\n    fieldMap: TextAsset;\n\n    /**\n      * Tile mnemonic mapping\n      */\n    @property({ type: [MnemonicMapping], visible: true, tooltip: \"Tile mnemonic mapping\" })\n    mnemMapping: MnemonicMapping[] = [];\n\n    /**\n     * Get standart tile models\n     * @returns collection of std tile models\n     */\n    public getStandartTiles(): TileModel[] {\n        return this.tiles.filter(item => !item.specialTile)\n    }\n\n    /**\n     * Gets tile model by type name\n     * @param typeName Type name\n     * @returns Tile model\n     */\n    public getTileModel(typeName: string): TileModel {\n        return this.tiles.filter(item => item.tileName == typeName)[0];\n    }\n\n    /**\n    * Gets tile model by mapmnemonic\n    * @param mnemonic Type name\n    * @returns Tile model\n    */\n    public getTileModelByMapMnemonic(mnemonic: string): TileModel {\n        let map = this.mnemMapping.filter(item => item.mnemonic == mnemonic);\n\n        if (map.length == 0) {\n            return this.tiles.filter(item => item.tileName == mnemonic)[0];\n        } Button\n\n        let res = this.tiles.filter(item => item.tileName == map[0].tileName)\n        return res.length != 0 ? res[0] : this.tiles[0];\n    }\n\n    public getFieldMap(): string[][] {\n        let result = [];\n\n        const textLines = this.fieldMap.text.split(/\\r?\\n/);\n        textLines.forEach((line, i) => {\n            let iinv = textLines.length - i - 1;\n            result[iinv] = [];\n            for (let j = 0; j < line.length; j++) {\n                result[iinv][j] = line.charAt(j);\n            }\n        });\n        return result;\n    }\n}"]}