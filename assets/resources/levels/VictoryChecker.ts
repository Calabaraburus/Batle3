import { TurnManager } from "../../entities/battle/TurnManager";
import { UnitGroupManager } from "../../entities/battle/UnitGroupManager";
import { CaptiveItemObject } from "../../entities/bonusItems/captive/CaptiveItemObject";
import { GridCell } from "../../entities/field/GridCell";
import { director } from "cc";
import { GameContext } from "../../entities/menu/GameContext";

/**
 * –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
 */
export interface VictoryCondition {
    type: 'eliminateAllEnemies' | 'killHero' | 'eliminateAllEnemiesInTurns' | 'activateCaptives';
    maxTurns?: number;          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã
    heroClassName?: string;     // –ò–º—è –∫–ª–∞—Å—Å–∞ –≥–µ—Ä–æ—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–±–∏—Ç—å
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
 */
export class VictoryChecker {
    private condition: VictoryCondition;
    public static instance: VictoryChecker | null;

    private static isSceneTransitioning = false; // üõë –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã

    constructor(condition: VictoryCondition) {
        this.condition = condition;
        VictoryChecker.instance = this;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
     */
    public checkVictory(): void {
        if (VictoryChecker.isSceneTransitioning) return;

        switch (this.condition.type) {
            case 'eliminateAllEnemies':
                this.checkEliminateAllEnemies();
                break;
            case 'killHero':
                if (this.condition.heroClassName) {
                    this.checkKillHero(this.condition.heroClassName);
                }
                break;
            case 'eliminateAllEnemiesInTurns':
                if (this.condition.maxTurns) {
                    this.checkEliminateAllEnemiesInTurns(this.condition.maxTurns);
                }
                break;
            case 'activateCaptives':
                this.checkActivateCaptives();
                break;
            default:
                console.warn(`[VictoryChecker] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: ${this.condition.type}`);
        }
    }

    /**
     * –ü–æ–±–µ–¥–∞, –µ—Å–ª–∏ –≤—Å–µ –≤—Ä–∞–≥–∏ –º–µ—Ä—Ç–≤—ã. –ü–æ—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –º–µ—Ä—Ç–≤—ã.
     */
    private checkEliminateAllEnemies(): void {
        const playerAlive = UnitGroupManager.instance.getAllPlayerGroups().some(g => g.units.some(u => u.isAlive));
        const enemyAlive = UnitGroupManager.instance.getAllEnemyGroups().some(g => g.units.some(u => u.isAlive));
        if (!enemyAlive) this.onVictory();
        else if (!playerAlive) this.onDefeat();
    }

    /**
     * –ü–æ–±–µ–¥–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–µ—Ä–æ–π –º–µ—Ä—Ç–≤
     */
    private checkKillHero(heroClassName: string): void {
        const hero = UnitGroupManager.instance.getAllUnits().find(u => u.constructor.name === heroClassName);
        if (hero && !hero.isAlive) this.onVictory();
    }

    /**
     * –ü–æ–±–µ–¥–∞, –µ—Å–ª–∏ –≤—Å–µ –≤—Ä–∞–≥–∏ –º–µ—Ä—Ç–≤—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
     * –ü–æ—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ–¥–æ–≤ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
     */
    private checkEliminateAllEnemiesInTurns(maxTurns: number): void {
        if (TurnManager.instance.getTurnCount() > maxTurns) {
            this.onDefeat();
            return;
        }
        const enemyAlive = UnitGroupManager.instance.getAllEnemyGroups().some(g => g.units.some(u => u.isAlive));
        if (!enemyAlive) this.onVictory();
    }

    /**
     * –ü–æ–±–µ–¥–∞, –µ—Å–ª–∏ –≤—Å–µ –ø–ª–µ–Ω–Ω–∏–∫–∏ (captives) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
     */
    private checkActivateCaptives(): void {
        const allCaptives = CaptiveItemObject.allCaptives;
        if (allCaptives.length > 0 && allCaptives.every(c => c.isUsedPublic)) {
            this.onVictory();
        }
        const playerAlive = UnitGroupManager.instance.getAllPlayerGroups().some(g => g.units.some(u => u.isAlive));
        if (!playerAlive) this.onDefeat();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞
     */
    private onVictory(): void {
        console.log('[VictoryChecker] üéâ –ü–æ–±–µ–¥–∞!');
        TurnManager.endGame('victory');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    private onDefeat(): void {
        console.log('[VictoryChecker] üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!');
        TurnManager.endGame('defeat');
    }

    public static resetInstance(): void {
        this.instance = null;
        this.isSceneTransitioning = false;
    }

}
