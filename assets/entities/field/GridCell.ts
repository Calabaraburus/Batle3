import { ItemSubObject } from "../bonusItems/ItemSubObject";
import { GridSubObject } from "../subObjects/GridSubObject";
import { UnitSubObject } from "../subObjects/units/UnitSubObject";
import { _decorator, Node } from 'cc';
import { HexCell } from "./HexCell";
import { ItemManager } from "../battle/ItemManager";
import { EffectSubObject } from "../subObjects/EffectSubObject";

/**
 * GridCell ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–∞—è —è—á–µ–π–∫–∞ –ø–æ–ª—è.
 * –•—Ä–∞–Ω–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å—É–±–æ–±—ä–µ–∫—Ç—ã (—é–Ω–∏—Ç—ã, –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø—Ä–æ—á–µ–µ) –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª.
 */
export class GridCell {

    // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–µ—Ç–∫–µ
    public x = 0;
    public y = 0;

    // –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è—á–µ–π–∫–∏ (—Ç–∏–ø, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥—Ä.)
    private parameters: Map<string, any> = new Map();

    // –°–ø–∏—Å–æ–∫ —Å—É–±–æ–±—ä–µ–∫—Ç–æ–≤, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –∫ —è—á–µ–π–∫–µ (—é–Ω–∏—Ç, –ø—Ä–µ–¥–º–µ—Ç, —Ç—É–º–∞–Ω –∏ —Ç.–¥.)
    private subObjects: GridSubObject[] = [];

    // –°–ø–∏—Å–æ–∫ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
    public neighbors: GridCell[] = [];

    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —è—á–µ–π–∫–µ
    private visualNode: Node | null = null;

    // --- –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---

    addParameter(key: string, value: any): void {
        this.parameters.set(key, value);
    }

    getParameter<T>(key: string): T | undefined {
        return this.parameters.get(key);
    }

    removeParameter(key: string): void {
        this.parameters.delete(key);
    }

    getParameters(): Map<string, any> {
        return this.parameters;
    }

    getGroupId(): string | undefined {
        return this.getParameter<string>('groupId');
    }

    isBlockedForGroups(): boolean {
        return this.getParameter<boolean>('blockedForGroups') === true;
    }

    setBlockedForGroups(value: boolean): void {
        this.addParameter('blockedForGroups', value);
    }

    // --- –†–∞–±–æ—Ç–∞ —Å —Å—É–±–æ–±—ä–µ–∫—Ç–∞–º–∏ ---

    attachSubObject(obj: GridSubObject): void {
        this.subObjects.push(obj);
        obj.onAttach(this);
    }

    detachSubObject(obj: GridSubObject): void {
        const index = this.subObjects.indexOf(obj);
        if (index !== -1) {
            this.subObjects.splice(index, 1);
            obj.onDetach();
        }
    }

    getSubObjects(): GridSubObject[] {
        return this.subObjects;
    }

    public reveal(forceKill = false): void {
        this.addParameter('opened', true);

        const hex = this.getVisualNode()?.getComponent(HexCell);
        hex?.markAsOpened(forceKill); // –≤—ã–∑—ã–≤–∞–µ—Ç .markAsBurning –∏ —Ç.–ø.

        // ‚õÖ –£–¥–∞–ª—è–µ–º —Ç—É–º–∞–Ω
        const fogs = this.getSubObjects().filter(obj => obj.constructor.name === 'FogSubObject');
        for (const fog of fogs) {
            this.detachSubObject(fog);
        }

        // üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—ã
        for (const sub of this.getSubObjects()) {
            if (typeof sub.setHidden === 'function') {
                sub.setHidden(false);
            }
        }

        // üí£ –ê–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–º–±—ã)
        ItemManager.instance.tryAutoTriggerItemsOnCell(this);
    }

    // --- –†–∞–±–æ—Ç–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é ---

    setVisualNode(node: Node): void {
        this.visualNode = node;
    }

    getVisualNode(): Node | null {
        return this.visualNode;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ---

    hasUnit(): boolean {
        return this.subObjects.some(obj => obj instanceof UnitSubObject);
    }

    hasItem(): boolean {
        return this.subObjects.some(obj => obj instanceof ItemSubObject);
    }

    hasEffect(): boolean {
        return this.subObjects.some(obj => obj instanceof EffectSubObject);
    }

    hasAnyMainSubObject(): boolean {
        return this.hasUnit() || this.hasItem();
    }
} 
