import { ItemSubObject } from './ItemSubObject';
import { GridCell } from './GridCell';
import { instantiate, Prefab } from 'cc';
import { BaseItemVisual } from './BaseItemVisual';
import { HexCell } from './HexCell';
import { ShieldEffectSubObject } from './ShieldEffectSubObject';

/**
 * –ë–æ–Ω—É—Å "–†–∞–∫–µ—Ç–∞": –ø–æ—Ä–∞–∂–∞–µ—Ç —Ü–µ–ª—å + –æ–¥–∏–Ω —Å–æ—Å–µ–¥–Ω–∏–π —Ç–∞–π–ª.
 * –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
 */
export class RocketItemObject extends ItemSubObject {
    public prefab: Prefab | null = null;

    /** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É */
    protected onInit(): void {
        if (!this.cell || !this.prefab) return;

        const tileNode = this.cell.getVisualNode();
        if (!tileNode) return;

        // –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª
        this.visualNode = instantiate(this.prefab);
        this.visualNode.name = 'ItemVisual';
        tileNode.addChild(this.visualNode);

        this.scaleToCell();       // –ü–æ–¥–≥–æ–Ω–∫–∞ –ø–æ–¥ —Ç–∞–π–ª
        this.setVisualHidden();  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É-–≤–ª–∞–¥–µ–ª—å—Ü–∞ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)
        this.ownerType = this.cell.getParameter<number>('type') || -1;
    }

    protected onDestroy(): void {
        this.visualNode = null;
    }

    /** –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç ‚Äî —É–¥–∞—Ä –ø–æ –≤—Ä–∞–∂–µ—Å–∫–æ–π –∫–ª–µ—Ç–∫–µ –∏ —Å–ª—É—á–∞–π–Ω–æ–º—É —Å–æ—Å–µ–¥—É */
    public tryApplyEffectTo(target: GridCell): boolean {
        if (!this.cell) return false;

        const isTargetEnemy = target.getParameter('type') === this.ownerType;
        const alreadyOpened = target.getParameter('opened') === true;

        // –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∫ –∑–∞–∫—Ä—ã—Ç—ã–º —Ç–∞–π–ª–∞–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        if (!isTargetEnemy || alreadyOpened) return false;

        // 1. –û—Å–Ω–æ–≤–Ω–æ–π —É–¥–∞—Ä
        this.markCellAsHit(target);

        // 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ—Å–µ–¥
        const neighbors = target.neighbors.filter(n => n.getParameter('opened') !== true);
        if (neighbors.length > 0) {
            const random = neighbors[Math.floor(Math.random() * neighbors.length)];
            this.markCellAsHit(random);
        }

        // 3. –£–¥–∞–ª–∏—Ç—å –±–æ–Ω—É—Å
        this.consume();
        return true;
    }

    /** –ü–æ–º–µ—á–∞–µ—Ç –∫–ª–µ—Ç–∫—É –∫–∞–∫ –ø–æ—Ä–∞–∂—ë–Ω–Ω—É—é, —Å–Ω–∏–º–∞–µ—Ç —Ç—É–º–∞–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª */
    protected markCellAsHit(cell: GridCell): void {
        const blocked = ShieldEffectSubObject.tryIntercept(cell); // üëà –≤—ã–∑–æ–≤
        if (blocked) return;

        // üí• –†–∞–∑—Ä—É—à–∞–µ–º –∫–ª–µ—Ç–∫—É
        cell.addParameter('destroyed', true);
        cell.addParameter('opened', true);

        const fogs = cell.getSubObjects().filter(s => s.constructor.name === 'FogSubObject');
        for (const fog of fogs) {
            cell.detachSubObject(fog);
        }

        const hex = cell.getVisualNode()?.getComponent(HexCell);
        hex?.markAsOpened(true);
        hex?.markAsBurning();
    }

    /** –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: —Å–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ */
    protected setVisualHidden(): void {
        this.visualNode?.getComponent(BaseItemVisual)?.setHide();
    }
}
