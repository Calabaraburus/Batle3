import { _decorator, Component } from 'cc';
import { HexGridManager } from './HexGridManager';
import { HexCell } from './HexCell';
import { TurnLabelController } from './TurnLabelController';
import { UnitSubObject } from './UnitSubObject';
import { UnitGroupManager } from './UnitGroupManager';
import { ItemSubObject } from './ItemSubObject';
import { GridCell } from './GridCell';

const { ccclass, property } = _decorator;

export enum Turn {
    Player,
    Enemy,
}

@ccclass('BattleController')
export class BattleController extends Component {
    public static instance: BattleController;

    @property({ type: HexGridManager })
    gridManager: HexGridManager | null = null;

    @property({ type: TurnLabelController })
    turnLabelController: TurnLabelController | null = null;

    public currentTurn: Turn = Turn.Player;
    private selectedItem: ItemSubObject | null = null;

    onLoad() {
        BattleController.instance = this;
    }

    start() {
        this.currentTurn = Turn.Player;
        this.updateTurnLabel();
    }

    updateTurnLabel() {
        if (this.turnLabelController) {
            const text = this.currentTurn === Turn.Player ? '–í–∞—à —Ö—ñ–¥' : '–•—ñ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞';
            this.turnLabelController.show(text, 1.5);
        }
    }

    /**
     * –ü–æ–º–µ—á–∞–µ—Ç –∫–ª–µ—Ç–∫—É –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é –∏ —É–±–∏—Ä–∞–µ—Ç —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã.
     */
    openAndRevealCell(cell: ReturnType<HexGridManager['getCell']>) {
        if (!cell) return;

        cell.addParameter('opened', true);
        this.gridManager?.revealCell(cell);

        const hexCell = cell.getVisualNode()?.getComponent(HexCell);
        hexCell?.markAsOpened();
        hexCell?.showDestroyedEffect?.();
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—ã—á–Ω—É—é –∞—Ç–∞–∫—É –Ω–∞ –∫–ª–µ—Ç–∫—É.
     */
    attackCell(cell: ReturnType<HexGridManager['getCell']>) {
        if (!cell) return;

        this.openAndRevealCell(cell);

        // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —é–Ω–∏—Ç–∞
        const unit = cell.getSubObjects().find(obj => obj instanceof UnitSubObject) as UnitSubObject;
        if (unit && unit.isAlive) {
            unit.markAsDead();
            UnitGroupManager.instance.onUnitDestroyed(unit);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
        const item = cell.getSubObjects().find(obj => obj instanceof ItemSubObject) as ItemSubObject;
        if (item && !item.isReadyToUse()) {
            item.activate();           // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ "–¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
            this.selectedItem = item;     // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        }

        this.endTurn();
    }

    endTurn() {
        this.currentTurn = this.currentTurn === Turn.Player ? Turn.Enemy : Turn.Player;
        this.updateTurnLabel();

        if (this.currentTurn === Turn.Enemy) {
            setTimeout(() => this.botAct(), 1800);
        }
    }

    botAct() {
        if (!this.gridManager) return;

        const targets = this.gridManager.getAllCells()
            .filter(c => c.getParameter('type') === 1 && !c.getParameter('opened'));

        if (targets.length === 0) return this.endTurn();

        const target = targets[Math.floor(Math.random() * targets.length)];
        this.openAndRevealCell(target);

        const unit = target.getSubObjects().find(obj => obj instanceof UnitSubObject) as UnitSubObject;
        if (unit && unit.isAlive) {
            unit.markAsDead();
            UnitGroupManager.instance.onUnitDestroyed(unit);
        }

        this.endTurn();
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ.
     */
    public onCellClicked(hexCell: HexCell): void {
        if (this.currentTurn !== Turn.Player || !this.gridManager) return;

        const cell = hexCell.getLogicalCell();
        if (!cell) return;

        const isOpened = cell.getParameter('opened') === true;

        // 1. –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω –∏ –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ —Ü–µ–ª–∏
        if (this.tryUseSelectedItem(cell)) return;

        // 2. –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ (–±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞)
        if (this.tryActivateItem(cell)) return;

        // 3. –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if (isOpened) return;

        // 4. –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞, –∑–∞–≤–µ—Ä—à–∞—é—â–∞—è —Ö–æ–¥
        this.attackCell(cell);
    }

    /** –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ */
    private tryUseSelectedItem(cell: GridCell): boolean {
        if (!this.selectedItem || !this.selectedItem.isReadyToArm()) return false;

        const success = this.selectedItem.tryApplyEffectTo(cell);
        if (success) {
            this.selectedItem = null;
            // üî∏ –•–æ–¥ –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∫–∞–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ
        }
        return true;
    }

    /** –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —è—á–µ–π–∫–µ */
    private tryActivateItem(cell: GridCell): boolean {
        const item = cell.getSubObjects().find(obj => obj instanceof ItemSubObject) as ItemSubObject;
        const playerType = this.currentTurn === Turn.Player ? 1 : 2;

        if (item && item.canBeActivatedBy(cell, playerType)) {
            if (!item.isReadyToArm()) {
                item.arm();
            }
            this.selectedItem = item;
            return true;
        }
        return false;
    }

}
