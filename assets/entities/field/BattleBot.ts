import { GridCell } from './GridCell';
import { HexGridManager } from './HexGridManager';
import { ItemSubObject } from './ItemSubObject';
import { UnitSubObject } from './UnitSubObject';
import { RocketItemObject } from './RocketItemObject';
import { RocketItemStrategy } from './RocketItemStrategy';
import type { ItemStrategy } from './ItemStrategy';
import { ShieldItemObject } from './ShieldItemObject';
import { ShieldItemStrategy } from './ShieldItemStrategy';

export class BattleBot {
    constructor(
        private grid: HexGridManager,           // –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—è
        private endTurn: () => void,            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
        private revealCell: (cell: GridCell) => void, // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏
        private attackCell: (cell: GridCell) => void // –ú–µ—Ç–æ–¥ –¥–ª—è –∞—Ç–∞–∫–∏ –∫–ª–µ—Ç–∫–∏
    ) {}

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è.
     * –ü–æ—Ä—è–¥–æ–∫: –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ‚Üí –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤—Ä–∞–≥–∞ ‚Üí –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
     */
    public act(): void {
        const cells = this.grid.getAllCells();

        if (this.tryUseItem(cells)) return;
        if (this.tryAttack(cells)) return;

        this.endTurn();
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±–æ—Ç–∞.
     * –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é, –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
     */
    private tryUseItem(cells: GridCell[]): boolean {
        const itemsToActivate = cells
            .filter(c => c.getParameter('type') === 1 && c.getParameter('opened'))
            .flatMap(c => c.getSubObjects())
            .filter(obj => obj instanceof ItemSubObject && !obj.isReadyToUse()) as ItemSubObject[];

        console.log('[BOT] –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', itemsToActivate.length);

        for (const item of itemsToActivate) {
            if (!item.isReadyToArm()) {
                console.log('[BOT] –ê–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–µ–¥–º–µ—Ç:', item.constructor.name);
                item.arm();
            }

            const strategy = this.getStrategyForItem(item);
            if (!strategy) {
                console.warn('[BOT] –ù–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:', item.constructor.name);
                continue;
            }

            const targets = strategy.evaluateTargets(this.grid.getAllCells(), item);
            console.log('[BOT] –¶–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:', targets.length);

            for (const target of targets) {
                // üîß –ü–µ—Ä–µ–¥–∞—ë–º grid –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
                if (item.tryApplyEffectTo(target)) {
                    console.log('[BOT] –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞');
                    this.endTurn();
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤—Ä–∞–∂–µ—Å–∫—É—é –∫–ª–µ—Ç–∫—É.
     * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –∫–ª–µ—Ç–∫–∏ –≤–æ–∑–ª–µ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö, —Ä–∞–Ω–µ–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö.
     */
    private tryAttack(cells: GridCell[]): boolean {
        const unopenedEnemyCells = cells.filter(c =>
            c.getParameter('type') === 1 && !c.getParameter('opened')
        );

        if (unopenedEnemyCells.length === 0) return false;

        const targetedAroundHits = this.getNeighborTargetsAroundHits(cells);

        const target = targetedAroundHits.length > 0
            ? this.getRandom(targetedAroundHits)
            : this.getRandom(unopenedEnemyCells);

        this.attackCell(target); // ‚úÖ –≤—Å—ë –¥–µ–ª–∞–µ—Ç —Å–∞–º
        return true;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–µ—Ç–∫–∏ —Ä—è–¥–æ–º —Å —É–∂–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–º–∏ –≤—Ä–∞–∂–µ—Å–∫–∏–º–∏ —é–Ω–∏—Ç–∞–º–∏.
     */
    private getNeighborTargetsAroundHits(cells: GridCell[]): GridCell[] {
        const openedDeadUnits = cells.filter(c =>
            c.getParameter('opened') &&
            c.getSubObjects().some(obj => obj instanceof UnitSubObject && !obj.isAlive)
        );

        const neighborTargets = new Set<GridCell>();

        for (const hitCell of openedDeadUnits) {
            for (const neighbor of hitCell.neighbors) {
                if (!neighbor.getParameter('opened') && neighbor.getParameter('type') === 1) {
                    neighborTargets.add(neighbor);
                }
            }
        }

        return Array.from(neighborTargets);
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.
     */
    private getStrategyForItem(item: ItemSubObject): ItemStrategy | null {
        if (item instanceof RocketItemObject) {
            return new RocketItemStrategy();
        }

        if (item instanceof ShieldItemObject) {
            return new ShieldItemStrategy();
        }

        return null;
    }

    /** –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
    private getRandom<T>(arr: T[]): T {
        return arr[Math.floor(Math.random() * arr.length)];
    }
}
