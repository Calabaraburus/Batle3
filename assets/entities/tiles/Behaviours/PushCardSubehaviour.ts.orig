import { assert } from "cc";
import { ObjectsCache } from "../../../ObjectsCache/ObjectsCache";
import { FieldController } from "../../field/FieldController";
import { CardService } from "../../services/CardService";
import { TileController } from "../TileController";
import { StdTileController } from "../UsualTile/StdTileController";
import { CardsSubBehaviour } from "./SubBehaviour";
import { AnimationEffect } from "../../effects/AnimationEffect";
import { ReadonlyMatrix2D } from "../../field/ReadonlyMatrix2D";

export class PushCardSubehaviour extends CardsSubBehaviour {
  private _cache: ObjectsCache;
  private _cardsService: CardService | null;
  private _field: FieldController | null | undefined;
  private _tilesToDestroy: TileController[] | undefined;
  private _matrix: ReadonlyMatrix2D<TileController>;

  prepare(): boolean {
    const targetTile = this.parent.target as StdTileController;

    let targetRow = 10;
    if (
      this.parent.cardsService?.getCurrentPlayerModel() ==
      this.parent.cardsService?._dataService?.botModel
    ) {
      targetRow = 1;
    }
    if (this.parent.field?.fieldMatrix == null) return false;
    this._matrix = this.parent.field?.fieldMatrix;
    if (this.parent.cardsService == null) return false;

<<<<<<< HEAD
    this.effectDurationValue = 1;
=======
    if (targetTile instanceof StdTileController) {
      if (
        targetTile.playerModel ==
        this.parent.cardsService?.getCurrentPlayerModel()
      ) {
        return false;
      }
    } else {
      return false;
    }

    this.effectDurationValue = 0.5;
>>>>>>> f79715a59b7503dd7d5efe0b9e1ca670a91b8266
    this._cardsService = this.parent.cardsService;
    this._field = this.parent.field;

    if (this._cardsService == null) return false;
    if (this._field == null) return false;
    this._tilesToDestroy = [];

    this._matrix.forEachInRow(targetRow, (tile, colId) => {
      if (tile.playerModel == this.parent.cardsService?.getOponentModel()) {
        this._tilesToDestroy?.push(tile);
      }
    });

    assert(ObjectsCache.instance, "Cache is null");

    this._cache = ObjectsCache.instance;

    return true;
  }

  run(): boolean {
    if (!this._tilesToDestroy) return false;
    this._tilesToDestroy.forEach((tile) => {
      this.parent.field?.fakeDestroyTile(tile);
    });

    return true;
  }

  effect(): boolean {
    this.parent.debug?.log("[push_card_sub] Start effect.");
    const curPlayer = this.parent.cardsService?.getCurrentPlayerModel();

    this.parent.audio.playSoundEffect("motivate");

    this._matrix.forEach((tile) => {
      if (tile.playerModel != curPlayer) return;

      const effect =
        this._cache?.getObjectByPrefabName<AnimationEffect>("motivateEffect");

      if (effect == null) {
        return false;
      }
      effect.node.parent = tile.node.parent;
      effect.node.position = tile.node.position;
      effect.node.scale = tile.node.scale;
      effect.play();
    });

    this.parent.debug?.log("[push_card_sub] End effect.");

    this.parent.audio.playSoundEffect("push");

    return true;
  }
}
