import { director, Director } from 'cc';
import { VictoryChecker } from '../../resources/levels/VictoryChecker';
import { BattleBot } from '../battleBot/BattleBot';
import { GridCell } from '../field/GridCell';
import { HexGridManager } from '../field/HexGridManager';
import { GameContext } from '../menu/GameContext';
import { Turn } from './BattleController';
import { BattleController } from './BattleController';
import { wait } from './TimeUtils';

export class TurnManager {
    public static instance: TurnManager;

    private turnCount = 1;
    private currentTurn: Turn = Turn.Player;
    
    private turnFrozen = false; // üßä –§–ª–∞–≥, –∑–∞–ø—Ä–µ—â–∞—é—â–∏–π –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
    private static gameEnded = false; // üõ° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
    private animationInProgress = false; // —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–Ω–∏–º–∞—Ü–∏–π

    public gridManager: HexGridManager | null = null;

    constructor() {
        TurnManager.instance = this;
    }

    public getCurrentTurn(): Turn {
        return this.currentTurn;
    }

    public async startFirstTurn(): Promise<void> {
        this.currentTurn = Turn.Player;
        this.turnCount = 1;
        BattleController.instance.updateTurnLabel();
    }

    public async endCurrentTurn(): Promise<void> {
        if (this.isTurnFrozen()) return; // üõë –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ö–æ–¥–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã

        this.currentTurn = this.currentTurn === Turn.Player ? Turn.Enemy : Turn.Player;
        this.turnCount++;

        BattleController.instance.updateTurnLabel();

        // üîÑ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        BattleController.instance.clearTemporaryStates?.();

        // üé≤ –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤—ã–Ω–µ—Å–µ–Ω –≤–æ –≤–Ω–µ—à–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä (–µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è)
        // GameEventManager.instance.checkAndTriggerEvent(this.turnCount);

        // ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (this.currentTurn === Turn.Enemy) {
            await wait(1000);

            // üßä –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º –±–æ—Ç–∞
            if (this.isTurnFrozen()) return;

            BattleController.instance.bot.act();
        }

        // üü° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –≤ –∫–æ–Ω—Ü–µ —Ö–æ–¥–∞
        VictoryChecker.instance?.checkVictory();
    }

    public getTurnCount(): number {
        return this.turnCount;
    }

    public isPlayerTurn(): boolean {
        return this.currentTurn === Turn.Player;
    }

    public isEnemyTurn(): boolean {
        return this.currentTurn === Turn.Enemy;
    }

    /** –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ (–ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è) */
    public freezeTurns(): void {
        this.turnFrozen = true;
    }

    public isTurnFrozen(): boolean {
        return this.turnFrozen;
    }

    /** –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º */
    public static endGame(result: 'victory' | 'defeat'): void {
        if (TurnManager.gameEnded) return;
        TurnManager.gameEnded = true;

        TurnManager.instance.freezeTurns();
        GameContext.instance.result = result;

        console.log(`[TurnManager] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã: ${result}`);

        director.once(Director.EVENT_AFTER_SCENE_LAUNCH, () => {
            console.log('[VictoryChecker] –°—Ü–µ–Ω–∞ EndScreen —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        });

        director.loadScene('EndScreen'); // ‚Üê —ç—Ç–æ –í–ê–ñ–ù–û
    }

    /** –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø–æ–ª–µ */
    public getAllCells(): GridCell[] {
        return this.gridManager?.getAllCells() ?? [];
    }

    public async waitForAnimationsIfNeeded(): Promise<void> {
        while (this.animationInProgress) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    }

    public setAnimationInProgress(flag: boolean) {
        this.animationInProgress = flag;
    }

}
