import { _decorator, Component, Node } from 'cc';
import { UnitGroupManager } from './UnitGroupManager';
import { wait } from './TimeUtils';
import { BattleUIPanel } from '../UI_components/BattleUIPanel';
import { ScoreManager } from '../pointsSystem/ScoreManager';
import { HexGridManager } from '../field/HexGridManager';
import { ItemSubObject } from '../bonusItems/ItemSubObject';
import { BattleBot } from '../battleBot/BattleBot';
import { GridCell } from '../field/GridCell';
import { HexCell } from '../field/HexCell';
import { ShieldEffectSubObject } from '../bonusItems/shieldEffect/ShieldEffectSubObject';
import { UnitSubObject } from '../subObjects/units/UnitSubObject';
import { VisualEffectPlayer } from '../battleEffects/VisualEffectPlayer';

const { ccclass, property } = _decorator;

export enum Turn {
    Player,
    Enemy,
}

@ccclass('BattleController')
export class BattleController extends Component {
    public static instance: BattleController;

    @property({ type: HexGridManager })
    gridManager: HexGridManager | null = null;

    // @property({ type: TurnLabelController })
    // turnLabelController: TurnLabelController | null = null;

    @property({ type: Node })
    battleUIPanelNode: Node | null = null;

    private battleUIPanel: BattleUIPanel | null;
    public currentTurn: Turn = Turn.Player;
    public selectedItem: ItemSubObject | null = null;

    private bot: BattleBot;

    onLoad() {
        BattleController.instance = this;
    }

    start() {
        if (this.gridManager) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≥—Ä–∏–¥—É –∏ –º–µ—Ç–æ–¥–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
            this.bot = new BattleBot(
                this.gridManager,
                () => this.endTurn(),
                (cell: GridCell) => this.openAndRevealCell(cell),
                (cell: GridCell) => this.attackCell(cell) // ‚úÖ –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            );

        }
        this.currentTurn = Turn.Player;
        if(this.battleUIPanelNode){
            this.battleUIPanel = this.battleUIPanelNode?.getComponent(BattleUIPanel);
            if (this.battleUIPanel){
                ScoreManager.instance.init(this.battleUIPanel);
            }
        }

        this.updateTurnLabel();
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ
    updateTurnLabel() {
        // if (this.turnLabelController) {
        //     const text = this.currentTurn === Turn.Player ? '–í–∞—à —Ö—ñ–¥' : '–•—ñ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞';
        //     this.turnLabelController.show(text, 1.5);
        // }
        // –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏
        this.battleUIPanel?.updateTurn(this.currentTurn);  
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–µ—Ç–∫—É, —Å–Ω–∏–º–∞–µ—Ç —Ç—É–º–∞–Ω, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    openAndRevealCell(cell: GridCell) {
        if (!cell) return;

        cell.addParameter('opened', true);
        this.gridManager?.revealCell(cell);

        const hexCell = cell.getVisualNode()?.getComponent(HexCell);
        hexCell?.markAsOpened();
        hexCell?.showDestroyedEffect?.();
    }

    // –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ç–∞–∫—É –ø–æ –∫–ª–µ—Ç–∫–µ, –ø—Ä–æ–≤–µ—Ä—è—è —é–Ω–∏—Ç–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç –≤–Ω—É—Ç—Ä–∏
    attackCell(cell: GridCell) {
        if (!cell) return;

        this.playExplosionEffect(cell);

        // üõ°Ô∏è –©–∏—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —É—Ä–æ–Ω
        const blocked = ShieldEffectSubObject.tryIntercept(cell);
        if (blocked) {
            this.endTurn();
            return;
        }

        const unit = cell.getSubObjects().find(obj => obj instanceof UnitSubObject) as UnitSubObject;

        if (unit && unit.isAlive) {
            ScoreManager.instance.registerHit();
            unit.markAsDead();
            UnitGroupManager.instance.onUnitDestroyed(unit);
        } else {
            ScoreManager.instance.registerMiss();
        }

        this.openAndRevealCell(cell); // —Ç–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ


        // üí£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ-–ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
        if (this.checkAndTriggerAutoItems()) return;

        this.endTurn();
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ö–æ–¥ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ö–æ–¥ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –±–æ—Ç–æ–º
    async endTurn() {
        this.currentTurn = this.currentTurn === Turn.Player ? Turn.Enemy : Turn.Player;
        this.updateTurnLabel();

        if (this.currentTurn === Turn.Enemy) {
            setTimeout(() => this.bot.act(), 1000);
        } 

        await wait(1000);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–µ (HexCell)
    public onCellClicked(hexCell: HexCell): void {
        if (this.currentTurn !== Turn.Player || !this.gridManager) return;

        const cell = hexCell.getLogicalCell();
        if (!cell) return;

        const isOpened = cell.getParameter('opened') === true;
        const cellType = cell.getParameter<number>('type');
        const playerType = 1;

        // 1. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        if (this.tryUseSelectedItem(cell)) return;

        // 2. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–º —Ç–∞–π–ª–µ
        if (this.tryActivateItem(cell)) return;

        // 3. –ï—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (isOpened) return;

        // üîí –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ —Å–≤–æ–∏–º –∫–ª–µ—Ç–∫–∞–º –≤–æ–æ–±—â–µ
        if (cellType === playerType) return;

        // 4. –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞
        this.attackCell(cell);
    }

    // –ü—Ä–æ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç, –µ—Å–ª–∏ –æ–Ω –≥–æ—Ç–æ–≤
    private tryUseSelectedItem(cell: GridCell): boolean {
        if (!this.selectedItem || !this.selectedItem.isReadyToArm()) return false;

        const success = this.selectedItem.tryApplyEffectTo(cell);
        if (success) {
            this.selectedItem = null;
            
            // üí£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ-–ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if (this.checkAndTriggerAutoItems()) return true;
        }
        return true;
    }

    // –ü—Ä–æ–±—É–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–ª–µ—Ç–∫–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    private tryActivateItem(cell: GridCell): boolean {
        const item = cell.getSubObjects().find(obj => obj instanceof ItemSubObject) as ItemSubObject;
        const playerType = this.currentTurn === Turn.Player ? 1 : 2;

        // üîí –ó–∞—â–∏—Ç–∞: –Ω–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö
        if (cell.getParameter('type') === playerType) {
            return false;
        }

        if (item && item.canBeActivatedBy(cell, playerType)) {
            if (!item.isReadyToArm()) {
                item.arm();
            }
            this.selectedItem = item;
            return true;
        }
        return false;
    }

    // üí£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ 
    private tryAutoTriggerItem(cell: GridCell): boolean {
        const item = cell.getSubObjects().find(obj => obj instanceof ItemSubObject) as ItemSubObject;
        if (!item || item.isReadyToUse()) return false;

        const triggered = item.tryApplyEffectTo(cell);
        if (triggered) {
            this.selectedItem = null;
            this.endTurn(); // üí• –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏
            return true;
        }

        item.activate();
        this.selectedItem = item;
        return false;
    }

    private checkAndTriggerAutoItems(): boolean {
        if (!this.gridManager) return false;

        const cells = this.gridManager.getAllCells();
        for (const cell of cells) {
            const isOpened = cell.getParameter('opened') === true;
            if (!isOpened) continue;

            const autoItem = cell.getSubObjects().find(obj =>
                obj instanceof ItemSubObject &&
                obj.isAutoTriggered &&
                !obj.isReadyToUse()
            ) as ItemSubObject;

            if (autoItem) {
                const triggered = autoItem.tryApplyEffectTo(cell);
                if (triggered) {
                    this.selectedItem = null;
                    this.endTurn(); // üí• –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    return true;
                }
            }
        }

        return false;
    }

    // –≤—ã–∑–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ 
    protected playExplosionEffect(cell: GridCell): void {
        VisualEffectPlayer.instance.playExplosion(cell);
    }
}