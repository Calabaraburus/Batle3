import { _decorator, Component, Node } from 'cc';
import { BattleUIPanel } from '../UI_components/BattleUIPanel';
import { ScoreManager } from '../pointsSystem/ScoreManager';
import { HexGridManager } from '../field/HexGridManager';
import { BattleBot } from '../battleBot/BattleBot';
import { GridCell } from '../field/GridCell';
import { HexCell } from '../field/HexCell';
import { VisualEffectPlayer } from '../battleEffects/VisualEffectPlayer';
import { TurnManager } from './TurnManager';
import { AttackManager } from './AttackManager';
import { ItemManager } from './ItemManager';
import { ItemSubObject } from '../bonusItems/ItemSubObject';

const { ccclass, property } = _decorator;

export enum Turn {
    Player,
    Enemy,
}

@ccclass('BattleController')
export class BattleController extends Component {
    public static instance: BattleController;

    @property({ type: HexGridManager })
    gridManager: HexGridManager | null = null;

    @property({ type: Node })
    battleUIPanelNode: Node | null = null;

    private battleUIPanel: BattleUIPanel | null;
    public bot: BattleBot;

    onLoad() {
        BattleController.instance = this;
    }

    start() {
        if (!this.gridManager) return;

        const allCells = this.gridManager.getAllCells();

        // üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        this.bot = new BattleBot(
            this.gridManager,
            () => this.delayedEndTurn(),
            (cell) => this.openAndRevealCell(cell),
            (cell) => AttackManager.instance.attack(cell)
        );

        // üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        new ItemManager(allCells);
        new AttackManager();

        TurnManager.instance = new TurnManager();
        TurnManager.instance.gridManager = this.gridManager;

        // üéõÔ∏è UI-–ø–∞–Ω–µ–ª—å
        if (this.battleUIPanelNode) {
            this.battleUIPanel = this.battleUIPanelNode?.getComponent(BattleUIPanel);
            if (this.battleUIPanel) {
                ScoreManager.instance.init(this.battleUIPanel);
            }
        }

    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–¥–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞
     */
    updateTurnLabel() {
        this.battleUIPanel?.updateTurn(TurnManager.instance.getCurrentTurn());
    }

    /**
     * –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ö–æ–¥
     */
    public startBattle() {
        this.updateTurnLabel();
        TurnManager.instance.startFirstTurn();
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
     */
    openAndRevealCell(cell: GridCell) {
        if (!cell || TurnManager.instance.isTurnFrozen()) return; // üßä –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞

        cell.addParameter('opened', true);
        this.gridManager?.revealCell(cell);

        const hexCell = cell.getVisualNode()?.getComponent(HexCell);
        hexCell?.markAsOpened();
        hexCell?.showDestroyedEffect?.();

        // üü¢ –í–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª –≤—Å–µ—Ö —Å—É–±–æ–±—ä–µ–∫—Ç–æ–≤
        for (const sub of cell.getSubObjects()) {
            if (typeof sub.setHidden === 'function') {
                sub.setHidden(false);
            }
        }

        ItemManager.instance.tryAutoTriggerItemsOnCell(cell);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≥–µ–∫—Å—É
     */
    public onCellClicked(hexCell: HexCell): void {
        if (TurnManager.instance.isTurnFrozen()) return; // ‚úÖ –ó–∞—â–∏—Ç–∞
        if (!TurnManager.instance.isPlayerTurn() || !this.gridManager) return;

        const cell = hexCell.getLogicalCell();
        if (!cell) return;

        const isOpened = cell.getParameter('opened') === true;
        const cellType = cell.getParameter<number>('type');
        const playerType = 1;

        // üéØ –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç -> –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç -> —É–¥–∞—Ä
        ItemManager.instance.tryUseSelectedItemOn(cell).then((used) => {
            if (used) return;

            if (ItemManager.instance.selectItemOnCell(cell)) return;

            if (isOpened || cellType === playerType) return;

            AttackManager.instance.attack(cell);
        });
    }

    /**
     * –≤—ã–∑–æ–≤ –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
     */
    public async delayedEndTurn(): Promise<void> {
        // ‚è≥ –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        await VisualEffectPlayer.instance.waitForAllEffects();

        // ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥
        await TurnManager.instance.endCurrentTurn();
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
     */
    protected playExplosionEffect(cell: GridCell): void {
        VisualEffectPlayer.instance.playExplosion(cell);
    }

    /**
     * –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    public clearTemporaryStates(): void {
        ItemManager.instance.reset();
    }
}
