import { instantiate, UITransform, Vec3, type Node, type Prefab } from 'cc';
import { BaseItemVisual } from './BaseItemVisual';
import { GridSubObject } from '../subObjects/GridSubObject';
import { GridCell } from '../field/GridCell';
import { VisualEffectPlayer } from '../battleEffects/VisualEffectPlayer';
import { HexCell } from '../field/HexCell';


export abstract class ItemSubObject extends GridSubObject {

    public stealable = true; // –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—Ä–∞—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã

    public visualNode: Node | null = null;
    public prefab: Prefab | null = null;

    public isAutoTriggered = false; // ‚ùó –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç

    protected isUsed = false;
    protected isArmed = false;
    protected ownerType = -1; // 1 = –∏–≥—Ä–æ–∫, 2 = –≤—Ä–∞–≥
    public visualScale: Vec3 = new Vec3(1, 1, 1); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±

    /** –ü—Ä–µ–¥–º–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω) */
    public activate(): void {
        const visual = this.visualNode?.getComponent(BaseItemVisual);
        visual?.setActive();
    }

    /** –ü—Ä–µ–¥–º–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω (–∏–ª–∏ –æ–±–µ–∑–≤—Ä–µ–∂–µ–Ω) */
    public deactivate(): void {
        const visual = this.visualNode?.getComponent(BaseItemVisual);
        visual?.setActive(); // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ .setInactive() –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        this.isUsed = true;
    }

    // —Å–æ–∫—Ä—ã—Ç–∏–µ –≤–∏–∑—É–∞–ª–∞
    public override setHidden(hidden: boolean): void {
        if (this.visualNode?.isValid) {
            this.visualNode.active = !hidden;
        }
    }

    public attachToCell(cell: GridCell): void {
        cell.attachSubObject(this);
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –æ–±—ä–µ–∫—Ç–∞ –∫ –∫–ª–µ—Ç–∫–µ
     * –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –ø–æ—Ç–æ–º–∫–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–≥–∏–∫–∏
     */
    public onAttachToCell(cell: GridCell): void {
        this.cell = cell;
    }

    protected initVisual(scaleCoef = 0.7): void {
        if (!this.cell || !this.prefab) return;

        const tileNode = this.cell.getVisualNode();
        if (!tileNode) return;

        if (!this.visualNode) {
            this.visualNode = instantiate(this.prefab);
            this.visualNode.name = 'ItemVisual';
            tileNode.addChild(this.visualNode);
            this.scaleToCell(scaleCoef, scaleCoef);
        }

        const wasStolen = this.cell.getParameter('wasStolen') === true;
        if (wasStolen) {
            this.setVisualActive();
            this.cell.removeParameter('wasStolen');
        } else {
            this.setVisualHidden();
        }

        this.ownerType = this.cell.getParameter<number>('type') || -1;
    }

    public isReadyToArm(): boolean {
        return this.isArmed;
    }

    public isReadyToUse(): boolean {
        return this.isUsed;
    }

    public isSelectable(): boolean {
        return !this.isUsed && this.isArmed;
    }

    public setOwner(newType: number): void {
        this.ownerType = newType;
    }

    protected setVisualActive(): void {
        const visual = this.visualNode?.getComponent(BaseItemVisual);
        visual?.setActive();
    }

        /** –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: —Å–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ */
    protected setVisualHidden(): void {
        this.visualNode?.getComponent(BaseItemVisual)?.setHide();
    }

    // –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–∑—Ä—ã–≤–∞
    protected playExplosionEffect(cell: GridCell): void {
        VisualEffectPlayer.instance.playExplosion(cell);
    }

    /** –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞) */
    public resetState(): void {
        this.isArmed = false;

        const visual = this.visualNode?.getComponent(BaseItemVisual);
        visual?.setActive();

        // –°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∞ –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        if (this.visualNode?.isValid) {
            this.visualNode.setScale(this.visualScale);
        }
    }

    /** –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç (—Å–≤–æ–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º) */
    public canBeActivatedBy(cell: GridCell, playerType: number): boolean {
        const isEnemyItem = this.ownerType !== playerType;
        const isRevealed = cell.getParameter('opened') === true;

        return isEnemyItem && isRevealed && !this.isUsed && !this.isArmed;
    }

    /** –ü–æ–¥–≥–æ–Ω–∫–∞ –≤–∏–∑—É–∞–ª–∞ –ø–æ–¥ –º–∞—Å—à—Ç–∞–± —è—á–µ–π–∫–∏ */
    protected scaleToCell(coefWidth: number, coefHeight: number): void {
        if (!this.cell || !this.visualNode) return;

        const tileNode = this.cell.getVisualNode();
        if (!tileNode) return;

        const tileTransform = tileNode.getComponent(UITransform);
        const itemTransform = this.visualNode.getComponent(UITransform);
        if (!tileTransform || !itemTransform) return;

        const scaleX = tileTransform.contentSize.width / itemTransform.contentSize.width * coefWidth;
        const scaleY = tileTransform.contentSize.height / itemTransform.contentSize.height * coefHeight;
        const uniformScale = Math.min(scaleX, scaleY);

        this.visualScale = new Vec3(uniformScale, uniformScale, 1); // üíæ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å—à—Ç–∞–±
        this.visualNode.setScale(this.visualScale);
    }

    /** –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ "–≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é" */
    public arm(): void {
        if (this.isArmed || this.isUsed) return;

        this.isArmed = true;

        const visual = this.visualNode?.getComponent(BaseItemVisual);
        visual?.setArmed();
    }

    /** –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç —Å –ø–æ–ª—è: –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏, –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ */
    public consume(): void {
        if (this.isUsed) return;

        // –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª
        if (this.visualNode?.isValid) {
            this.visualNode.destroy();
            this.visualNode = null;
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–≥–∏–∫–∏
        if (this.cell) {
            this.cell.detachSubObject(this);
        }

        this.isUsed = true;
    }

    /** –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—É–º–∞–Ω–∞ —Å –∫–ª–µ—Ç–∫–∏ */
    protected revealFog(cell: GridCell): void {
        const fogs = cell.getSubObjects().filter(s => s.constructor.name === 'FogSubObject');
        for (const fog of fogs) cell.detachSubObject(fog);
    }

    /** –ü–æ–º–µ—á–∞–µ—Ç –∫–ª–µ—Ç–∫—É –∫–∞–∫ –ø–æ—Ä–∞–∂—ë–Ω–Ω—É—é –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ—ë */
    protected markCellAsHit(cell: GridCell): void {
        cell.addParameter('destroyed', true);
        cell.addParameter('opened', true);

        this.revealFog(cell);

        // const visual = cell.getVisualNode();
        const hex = cell.getVisualNode()?.getComponent(HexCell);

        hex?.markAsOpened(true);
        hex?.markAsBurning();
    }

    public abstract tryApplyEffectTo(target: GridCell): boolean;

    protected abstract onInit(): void;
    protected abstract onDestroy(): void;
}
